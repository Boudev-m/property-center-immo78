# Docker file to create a custom docker image with some configurations

# Use a PHP/Apache image as base
# This image will be used to create a container which will contain the app
FROM php:8.1-apache
# to check : create interactive container with bash and > php -v


# install php extensions : intl, pdo_mysql, gd
# See https://github.com/mlocati/docker-php-extension-installer
# Remove error 'Please install the "intl" extension for full localization capabilities.'
ADD https://github.com/mlocati/docker-php-extension-installer/releases/latest/download/install-php-extensions /usr/local/bin/
RUN chmod +x /usr/local/bin/install-php-extensions && \
    install-php-extensions gd pdo_mysql intl
# to check : create interactive container with bash and check list of extensions with > php -m


# install composer
RUN curl -sSk https://getcomposer.org/installer | php -- --disable-tls && \
    mv composer.phar /usr/local/bin/composer
# to check : create interactive container with bash and > composer --version


# update apt and install node and npm
RUN apt-get update && apt-get install -yqq nodejs npm
# to check : create interactive container with bash and > node -v, npm -v


# copy the app (the vendor repertory isn't included)
COPY . /var/www/
# to check : create interactive container with bash and go to /var/www/


# Copy the config file for Apache server
# change dcument root '/var/www/html' to '/var/www/public' (like public repertory from Symfony)
# The config file to replace is '000-default.conf' in etc/ in the container (ubuntu)
COPY ./docker/apache.conf /etc/apache2/sites-available/000-default.conf
# to check : create interactive container with bash and check the file in /etc/ path


# Change ip in the database URL in .env file
# Replace '127.0.0.1' by the name of mysql service 'database-mysql'
# RUN sed -i 's/127.0.0.1/database-mysql/g' /var/www/.env
# Useless with the environment of app on docker-compose.yml


# Execute all commands to install the dependencies of the app
RUN cd /var/www/ \
    composer install && \
    npm install --force && \
    npm run build
# to check : create interactive container with bash and go to the app folder, check if vendor and node_modules created, and public/build for assets


# Change permission for cache/ and log/ folders
# Remove error 'Unable to write in the "cache" directory (/var/www/var/cache/dev)'
RUN chown -R www-data:www-data /var/www/var
# to check : create interactive container with bash and check with cmd > ls -l var/cache


# Change permission for public/images/ and public/media/
# Remove error 'Unable to write in the "images" directory (/var/www/public/images)'
RUN chown -R www-data:www-data /var/www/public/images && \
    chown -R www-data:www-data /var/www/public/media
# 


# Workdirectory, base directory into container
# replace default '/var/www/html' to '/var/www'
WORKDIR /var/www/
# to check : create interactive container with bash and check current directory 'root@a2b17ab97fd3:/var/www/' (cmd > pwd)


# To display the container from outside
# tells the container which port it should expose outside
# 'The container is listening on port 80'
# the port 80 is exposed and accessible
EXPOSE 80
# to check : create container and go to localhost:8080